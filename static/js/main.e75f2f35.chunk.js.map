{"version":3,"sources":["fBase.js","ApiKeys.js","routes/Answer.js","routes/Auth.js","routes/Detail.js","routes/Home.js","routes/Profile.js","components/Routes.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","authService","auth","dbService","firestore","storage","Apikeys","USER_ID","SERVICE_ID","TEMPLATE_ID","Answer","useParams","id","questionid","useState","questionInfo","setQuestionInfo","newAnswer","setNewAnswer","instaID","setInstaID","nickname","setNickname","backgroundColor","setBackgroundColor","font","setFont","fontStyle","setFontStyle","isLoading","setIsLoading","history","useHistory","onSubmit","e","a","preventDefault","prevArray","answerArray","newAnswerObj","answerContent","collection","doc","question","update","then","alert","emailjs","sendForm","target","result","console","log","catch","error","text","onChange","name","value","getQuestion","where","get","querySnapshot","forEach","data","style","useEffect","className","fontFamily","type","placeholder","required","htmlFor","onClick","push","Auth","email","setEmail","password","setPassword","newAccount","setNewAccount","setError","event","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","prev","Detail","userAuth","setQuestion","setAnswer","getDetail","updated_dttm","Date","now","Home","to","Profile","selectionToDel","questions","setQuestions","selection","setSelection","questionObj","uuidv4","registered_dttm","set","onDeleteAnswer","window","confirm","splice","getQuestions","onSnapshot","snapshot","questionsData","docs","map","getSelection","width","length","index","tempElem","document","createElement","location","protocol","host","body","appendChild","select","execCommand","answer","delete","signOut","AppRouter","isLoggedIn","exact","path","pathname","stete","App","init","setInit","setUserAuth","setIsLoggedIn","onAuthStateChanged","user","uid","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e75f2f35.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDdKuvipqVEbHicVyXLDjx_frIUA0EHMsw\",\r\n  authDomain: \"myowndrawer-98874.firebaseapp.com\",\r\n  projectId: \"myowndrawer-98874\",\r\n  storageBucket: \"myowndrawer-98874.appspot.com\",\r\n  messagingSenderId: \"278557159432\",\r\n  appId: \"1:278557159432:web:ef028ac7dec9f98b35e1bd\",\r\n  measurementId: \"G-4ZY2ZWVK8V\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","const Apikeys = {\r\n    USER_ID: 'user_9Yzjv9HczozAI5LPmsW88',\r\n    SERVICE_ID: 'service_wd4vewg',\r\n    TEMPLATE_ID: 'template_8cqpfld'\r\n}\r\n\r\nexport default Apikeys","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { dbService } from \"../fBase\";\r\nimport emailjs from \"emailjs-com\"\r\nimport Apikeys from \"../ApiKeys\";\r\n\r\nconst Answer = () => {\r\n    const { id, questionid } = useParams();\r\n    const [questionInfo, setQuestionInfo] = useState({});\r\n    const [newAnswer, setNewAnswer] = useState(\"\");\r\n    const [instaID, setInstaID] = useState(\"익명\");\r\n    const [nickname, setNickname] = useState(\"익명\");\r\n    const [backgroundColor, setBackgroundColor] = useState(\"\");\r\n    const [font, setFont] = useState(\"\");\r\n    const [fontStyle, setFontStyle] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const onSubmit = async e => {\r\n        e.preventDefault();\r\n        const prevArray = questionInfo.answerArray;\r\n        const newAnswerObj = {\r\n            answerContent: newAnswer,\r\n            instaID,\r\n            nickname\r\n        }\r\n        await dbService.collection(`${id}`).doc(`${questionInfo.question}`).update({\r\n            answerArray: [...prevArray, newAnswerObj]\r\n        }).then(() => {\r\n            alert(\"성공적으로 답장했습니다. 감사합니다.\")\r\n            setNewAnswer(\"\");\r\n            setInstaID(\"익명\");\r\n            setNickname(\"익명\");\r\n            emailjs.sendForm(Apikeys.SERVICE_ID, Apikeys.TEMPLATE_ID, e.target, Apikeys.USER_ID)\r\n            .then(result => {\r\n                console.log(\"Success\", result)\r\n            }).catch(error => {\r\n                console.log(\"Error\", error.text)\r\n            })\r\n        }).catch((error) => {\r\n            alert(\"무언가 문제가 생겼습니다. 스크린샷을 통해 알려주시면 감사하겠습니다. 감사합니다.\", error)\r\n        });\r\n    }\r\n\r\n    const onChange = e => {\r\n        const {target: {name, value}} = e;\r\n        if (name === \"answer\") {\r\n            setNewAnswer(value)\r\n        } else if (name === \"instagram\") {\r\n            setInstaID(value)\r\n        } else if (name === \"nickname\") {\r\n            setNickname(value)\r\n        }\r\n    }\r\n\r\n    const onCreateAccountClick = e => {\r\n        e.preventDefault();\r\n        history.push(\"/auth\")\r\n    }\r\n\r\n    const getQuestion = async () => {\r\n        await dbService.collection(`${id}`).where(\"id\", \"==\", questionid)\r\n        .get()\r\n        .then(querySnapshot => {\r\n            querySnapshot.forEach((doc) => {\r\n                setQuestionInfo(doc.data())\r\n                if (doc.data().style) {\r\n                    setBackgroundColor(doc.data().style.backgroundColor)\r\n                    setFont(doc.data().style.font)\r\n                    setFontStyle(doc.data().style.fontStyle)\r\n                }\r\n                setIsLoading(true);\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getQuestion();\r\n    }, [])\r\n    return (\r\n        <div style={{backgroundColor: backgroundColor}}  className=\"answer__container\">\r\n            {isLoading ? \r\n            <>\r\n                <h3  style={{fontStyle: fontStyle, fontFamily: font}}  className=\"answer__title\">{questionInfo.question}</h3>\r\n                <form className=\"answer__form\" onSubmit={onSubmit}>\r\n                    <textarea className=\"answer__content\" type=\"text\" placeholder=\"대답을 적어주세요.\" name=\"answer\" onChange={onChange} value={newAnswer} required />\r\n                    <div className=\"answer__input-container\">\r\n                        <div className=\"answer__nickname-container\">\r\n                            <label className=\"answer__nickname-label\" htmlFor=\"nickname\">이름 : </label>\r\n                            <input className=\"answer__nickname-input\" type=\"text\" name=\"nickname\" placeholder=\"이름\" onChange={onChange} value={nickname} />\r\n                        </div>\r\n                        <div className=\"answer__instagram-container\">\r\n                        <label className=\"answer__instagram-label\" htmlFor=\"instagram\">인스타그램 ID : </label>\r\n                            <input className=\"answer__instagram-input\" type=\"text\" name=\"instagram\" placeholder=\"인스타 아이디\" onChange={onChange} value={instaID} />\r\n                        </div>\r\n                        <input className=\"answer__submit\" type=\"submit\" value=\"답장 하기\"/>\r\n                    </div>\r\n                </form>\r\n                <button onClick={onCreateAccountClick}>나도 질문 만들러 가기</button>\r\n            </>\r\n            : \"Loading...\" }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Answer;","import { authService } from \"../fBase\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\")\r\n    const history = useHistory();\r\n\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if (name === \"email\") {\r\n            setEmail(value)\r\n        } else if (name === \"password\"){\r\n            setPassword(value)\r\n        }\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            if (newAccount) {\r\n                await authService.createUserWithEmailAndPassword(\r\n                    email, \r\n                    password\r\n                );\r\n            } else {\r\n                await authService.signInWithEmailAndPassword(\r\n                    email, \r\n                    password\r\n                );\r\n            }\r\n        } catch (error) {\r\n            if (error.message === \"There is no user record corresponding to this identifier. The user may have been deleted.\") {\r\n                setError(\"입력하신 아이디가 없습니다.\")\r\n            } else {\r\n                setError(error.message)\r\n            }\r\n        }\r\n        history.push(\"/\")\r\n    }\r\n\r\n    const toggleAccount = () => setNewAccount((prev) => !prev)\r\n    return (\r\n        <div className=\"auth__container\">\r\n            <h3 className=\"auth__title\">질문 페이지</h3>\r\n            <p>질문을 만드려면 가입을 해야해요.</p>\r\n            <div className=\"auth-form__container\">\r\n                <form className=\"auth-form\" onSubmit={onSubmit}>\r\n                    <div className=\"auth-form__component\">\r\n                        <label className=\"auth-form__title\">E-mail</label>\r\n                        <input className=\"input auth__input\" name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange={onChange}/>\r\n                    </div>\r\n                    <div className=\"auth-form__component\">\r\n                        <label className=\"auth-form__title\">Password</label>\r\n                        <input className=\"input auth__input\" name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange}/>\r\n                    </div>\r\n                    <div className=\"auth-form__btn\">\r\n                        <input className=\"btn\" type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\r\n                        <span className=\"error\">{error}</span>\r\n                        <span className=\"change-btn\" onClick={toggleAccount}>\r\n                            { newAccount \r\n                            ? \"Log In\" \r\n                            : \"Create Account\" }\r\n                        </span>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;","import React, { useEffect, useState } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport { dbService } from \"../fBase\";\r\n\r\nconst Detail = ({userAuth}) => {\r\n    const { id, questionid } = useParams();\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [answer, setAnswer] = useState(\"\");\r\n    const [backgroundColor, setBackgroundColor] = useState(\"\");\r\n    const [font, setFont] = useState(\"\");\r\n    const [fontStyle, setFontStyle] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        dbService.collection(`${id}`).doc(`${question.question}`)\r\n        .update({\r\n            style: {\r\n                font,\r\n                fontStyle,\r\n                backgroundColor,\r\n            },\r\n            updated_dttm: Date.now()\r\n        });\r\n        alert(\"성공적으로 변경되었습니다.\");\r\n    }\r\n\r\n    const onBgColorChange = e => {\r\n        const {target: {value}} = e;\r\n        setBackgroundColor(value);\r\n    }\r\n\r\n    const onFontChange = e => {\r\n        const {target: {value}} = e;\r\n        setFont(value);\r\n    }\r\n\r\n    const onFontStyleChange = e => {\r\n        const {target: {value}} = e;\r\n        setFontStyle(value);\r\n    }\r\n\r\n    const getDetail = async () => {\r\n        await dbService.collection(`${id}`).where(\"id\", \"==\", questionid)\r\n        .get()\r\n        .then(querySnapshot => {\r\n            querySnapshot.forEach((doc) => {\r\n                setQuestion(doc.data())\r\n                setAnswer(doc.data().answerArray)\r\n                if (doc.data().style) {\r\n                    setBackgroundColor(doc.data().style.backgroundColor)\r\n                    setFont(doc.data().style.font)\r\n                    setFontStyle(doc.data().style.fontStyle)\r\n                }\r\n                setIsLoading(true);\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if ( id !== userAuth ) {\r\n            <Redirect to=\"/\" />\r\n        }\r\n        getDetail();\r\n    }, [])\r\n    return (\r\n        <div style={{backgroundColor: backgroundColor}} className=\"answer__container\">\r\n        {isLoading ? \r\n        <>\r\n            <h3 style={{fontStyle: fontStyle, fontFamily: font}} className=\"answer__title\">{question.question}</h3>\r\n            <form onSubmit={onSubmit} className=\"answer__form\">\r\n                <textarea className=\"answer__content\" type=\"text\" placeholder=\"대답을 적어주세요.\" name=\"answer\" />\r\n                <div className=\"answer__input-container\">\r\n                    <div className=\"answer__nickname-container\">\r\n                        <label className=\"answer__nickname-label\" htmlFor=\"nickname\">질문 폰트 : </label>\r\n                        <select onChange={onFontChange} value={font}>\r\n                            <option value=\"sans-serif\">sans-serif</option>\r\n                            <option value=\"serif\">serif</option>\r\n                        </select>\r\n                        <select onChange={onFontStyleChange} value={fontStyle}>\r\n                            <option value=\"normal\">normal</option>\r\n                            <option value=\"italic\">italic</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"answer__instagram-container\">\r\n                    <label className=\"answer__instagram-label\" htmlFor=\"instagram\">배경 색상 : </label>\r\n                        <input onChange={onBgColorChange} type=\"color\" value={backgroundColor}/>\r\n                    </div>\r\n                    <input className=\"answer__submit\" type=\"submit\" value=\"저장 하기\"/>\r\n                </div>\r\n            </form>\r\n        </>\r\n        : \"Loading...\" }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Detail;","import { Link } from \"react-router-dom\"\r\n\r\nconst Home = () => {\r\n    return (\r\n        <>\r\n        <div>Home</div>\r\n        <Link to=\"/auth\">로그인</Link>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { v4 as uuidv4} from \"uuid\";\r\nimport { authService, dbService } from \"../fBase\";\r\n\r\nconst Profile = ({userAuth}) => {\r\n    const history = useHistory();\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [questions, setQuestions] = useState([]);\r\n    const [selection, setSelection] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const { id } = useParams();\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const questionObj = {\r\n            question,\r\n            id: uuidv4(),\r\n            answerArray: [],\r\n            registered_dttm: Date.now(),\r\n            updated_dttm: 0,\r\n        }\r\n        await dbService.collection(`${userAuth}`).doc(`${question}`).set(questionObj)\r\n        setSelection(questionObj)\r\n        setQuestion(\"\");\r\n    }\r\n\r\n    const onQuestionChange = e => {\r\n        const {target: {value}} = e;\r\n        setQuestion(value);\r\n    }\r\n\r\n    const onSelectChange = e => {\r\n        const {target: {value}} = e;\r\n        questions.map((question) => question.question === value && setSelection(question))\r\n    }\r\n\r\n    const onLinkClick = (e) => {\r\n        e.preventDefault();\r\n        const tempElem = document.createElement('textarea')\r\n        tempElem.value = `${window.location.protocol}//${window.location.host}/${userAuth}/${selection.id}#/${userAuth}/${selection.id}`\r\n        document.body.appendChild(tempElem)\r\n        tempElem.select();\r\n        document.execCommand(\"copy\");\r\n        history.push(`/${userAuth}/${selection.id}`)\r\n    }\r\n\r\n    const onLogOut = (e) => {\r\n        e.preventDefault();\r\n        authService.signOut();\r\n        history.push(\"/\")\r\n    }\r\n\r\n    const onDeleteAnswer = id => {\r\n        return function () {\r\n            if (window.confirm(\"정말 해당 답변을 삭제하시겠습니까?\")) {\r\n                selection.answerArray.splice(id, 1)\r\n                dbService.collection(`${userAuth}`).doc(`${selection.question}`)\r\n                .update({\r\n                    answerArray : selection.answerArray\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const onDeleteQuestion = selectionToDel => {\r\n        return function () {\r\n            if (window.confirm(\"정말 해당 질문을 삭제하시겠습니까? \\n 포함된 답변들도 모두 삭제됩니다.\")) {\r\n                dbService.collection(`${userAuth}`).doc(`${selectionToDel.question}`).delete();\r\n                if (questions) {\r\n                    setSelection(questions[0])\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const getQuestions = async () => {\r\n        dbService.collection(`${userAuth}`)\r\n        .onSnapshot(snapshot => {\r\n            const questionsData = snapshot.docs.map((doc) => ({\r\n                id:doc.id,\r\n                ...doc.data(),\r\n            }))\r\n            setQuestions(questionsData)\r\n        })\r\n    }\r\n\r\n    const getSelection = async () => {\r\n        const question = await dbService.collection(`${userAuth}`).get()\r\n        if (question.docs[0]) {\r\n            setSelection(question.docs[0].data())\r\n        }\r\n        setIsLoading(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (id !== userAuth) {\r\n            history.push('/auth')\r\n        } else {\r\n            getSelection();\r\n            getQuestions();\r\n        }\r\n    }, [userAuth])\r\n\r\n    return (\r\n        <div className=\"profile__container\">\r\n            {isLoading ? \r\n            <>\r\n                <h3 className=\"profile__title\">Q & A</h3>\r\n                <h5>질문 만들기</h5>\r\n                <form onSubmit={onSubmit} className=\"question__form\">\r\n                    <input className=\"question__text\" type=\"text\" placeholder=\"질문\" onChange={onQuestionChange} value={question}/>\r\n                    <input className=\"question__submit\" type=\"submit\" value=\"질문 만들기\"/>\r\n                </form>\r\n                <hr style={{width: \"80%\"}}/>\r\n                { questions ? questions.length !== 0 &&\r\n                    <>\r\n                        <h5>질문 관리 & 답변 보기</h5>\r\n                        <select className=\"question-pages\" onChange={onSelectChange} value={selection.question}>\r\n                            {questions.map((question, index) => {\r\n                                return (<option key={index}>{question.question}</option>)\r\n                            })}\r\n                        </select>\r\n                        <Link className=\"question-page__link\" to={`/${userAuth}/${selection.id}/custom`}>답변 페이지 커스텀 + 답변 보기</Link><br />\r\n                        <button onClick={onLinkClick} className=\"answer-page__link\" >' {selection.question} ' 답변 링크 공유하기</button>\r\n                    </>\r\n                : null\r\n                }\r\n                    <div>\r\n                    {selection.answerArray ? selection.answerArray.length !== 0 &&\r\n                    <>\r\n                        <table className=\"answer__table-container\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>글쓴이</th>\r\n                                    <th>내용</th>\r\n                                    <th>인스타 아이디</th>\r\n                                    <th>삭제</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody  className=\"answer__table-body\">                                \r\n\r\n                            {selection.answerArray.map((answer, index) => {\r\n                                return (\r\n                                    <>\r\n                                        <tr>\r\n                                            <td>{answer.nickname}</td>\r\n                                            <td>{answer.answerContent}</td>\r\n                                            <td>{answer.instaID}</td>\r\n                                            <td><button onClick={onDeleteAnswer(index)}>X</button></td>\r\n                                        </tr>\r\n                                    </>\r\n                                )\r\n                            })}\r\n                            </tbody>\r\n                        </table><br />\r\n                    </>\r\n                    : null\r\n                    }\r\n                    <div className=\"profile__button-container\">\r\n                        { questions ? questions.length !== 0 &&\r\n                        <button onClick={onDeleteQuestion(selection)}>질문 삭제하기</button>\r\n                        : null\r\n                        }\r\n                        <button onClick={onLogOut}>로그아웃</button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n            : \"Loading...\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React, { useEffect } from \"react\";\r\nimport { HashRouter as Router, Route, Switch, Redirect} from \"react-router-dom\";\r\nimport Answer from \"../routes/Answer\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Detail from \"../routes/Detail\";\r\nimport Home from \"../routes/Home\";\r\nimport Profile from \"../routes/Profile\";\r\n\r\nconst AppRouter = ({isLoggedIn, userAuth}) => {\r\n    useEffect(()=>{\r\n        console.log(isLoggedIn)\r\n    })\r\n    return (\r\n        <>\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    {isLoggedIn ? <Redirect to={{\r\n                                            pathname: `/${userAuth}`,\r\n                                            stete: {userAuth}\r\n                                            }} /> \r\n                    : <Home />}\r\n                </Route>\r\n                <Route exact path=\"/auth\">\r\n                    {isLoggedIn ? <Redirect to={{\r\n                                            pathname: `/${userAuth}`,\r\n                                            stete: {userAuth}\r\n                                            }} /> \r\n                    : <Auth />}\r\n                </Route>\r\n                <Route exact path=\"/logout\">\r\n                    <Home />\r\n                </Route>\r\n                <Route exact path=\"/:id\">\r\n                    <Profile userAuth={userAuth}/>\r\n                </Route>\r\n                <Route exact path=\"/:id/:questionid\">\r\n                    <Answer userAuth={userAuth}/>\r\n                </Route>\r\n                <Route exact path=\"/:id/:questionid/custom\">\r\n                    <Detail userAuth={userAuth}/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AppRouter;","import React, { useEffect, useState } from \"react\";\nimport { authService } from \"../fBase\";\nimport AppRouter from \"./Routes\";\n\nconst App = () => {\n  const [init, setInit] = useState(false);\n  const [userAuth, setUserAuth] = useState(\"\");\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserAuth(user.uid)\n        setIsLoggedIn(true)\n      } else {\n        setUserAuth(\"\")\n        setIsLoggedIn(false)\n      }\n      setInit(true);\n    })\n  }, []);\n  return (\n    <>\n      {init ? <AppRouter isLoggedIn={isLoggedIn} userAuth={userAuth} /> : \"Loading...\"}\n    </>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App\"\nimport \"./Styles.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}
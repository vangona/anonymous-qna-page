{"version":3,"sources":["fBase.js","ApiKeys.js","routes/Answer.js","routes/Auth.js","routes/Detail.js","routes/Home.js","routes/Profile.js","components/Routes.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","authService","auth","dbService","firestore","storage","Apikeys","USER_ID","SERVICE_ID","TEMPLATE_ID","Answer","useParams","id","questionid","useState","questionInfo","setQuestionInfo","newAnswer","setNewAnswer","instaID","setInstaID","nickname","setNickname","isLoading","setIsLoading","onSubmit","e","a","preventDefault","prevArray","answerArray","newAnswerObj","answerContent","collection","doc","question","update","then","alert","emailjs","sendForm","target","result","console","log","catch","error","text","onChange","name","value","getQuestion","where","get","querySnapshot","forEach","data","useEffect","className","type","placeholder","required","htmlFor","Auth","email","setEmail","password","setPassword","newAccount","setNewAccount","setError","history","useHistory","event","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","push","onClick","prev","Detail","userAuth","setQuestion","setAnswer","backgroundColor","setBackgroundColor","font","setFont","fontStyle","setFontStyle","getDetail","style","fontFamily","Home","to","Profile","selectionToDel","questions","setQuestions","selection","setSelection","questionObj","uuidv4","registered_dttm","Date","now","updated_dttm","set","onDeleteAnswer","window","confirm","splice","getQuestions","onSnapshot","snapshot","questionsData","docs","map","getSelection","length","index","answer","delete","signOut","AppRouter","isLoggedIn","exact","path","pathname","stete","App","init","setInit","setUserAuth","setIsLoggedIn","onAuthStateChanged","user","uid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAeAA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKeR,IAAzB,IAEMS,EAAcT,IAASU,OACvBC,EAAYX,IAASY,Y,GACJZ,IAASa,U,sDCfxBC,EANC,CACZC,QAAS,6BACTC,WAAY,kBACZC,YAAa,oB,OCuFFC,EApFA,WACX,MAA2BC,cAAnBC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,WACZ,EAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA8BJ,mBAAS,gBAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAgCN,mBAAS,gBAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAkCR,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KAEMC,EAAQ,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DACbD,EAAEE,iBACIC,EAAYd,EAAae,YACzBC,EAAe,CACjBC,cAAef,EACfE,UACAE,YANS,SAQPlB,EAAU8B,WAAV,UAAwBrB,IAAMsB,IAA9B,UAAqCnB,EAAaoB,WAAYC,OAAO,CACvEN,YAAY,GAAD,mBAAMD,GAAN,CAAiBE,MAC7BM,MAAK,WACJC,MAAM,wGACNpB,EAAa,IACbE,EAAW,gBACXE,EAAY,gBACZiB,IAAQC,SAASlC,EAAQE,WAAYF,EAAQG,YAAaiB,EAAEe,OAAQnC,EAAQC,SAC3E8B,MAAK,SAAAK,GACFC,QAAQC,IAAI,UAAWF,MACxBG,OAAM,SAAAC,GACLH,QAAQC,IAAI,QAASE,EAAMC,YAEhCF,OAAM,SAACC,GACNR,MAAM,+NAAiDQ,MAtB9C,2CAAH,sDA0BRE,EAAW,SAAAtB,GACb,MAAgCA,EAAzBe,OAASQ,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,MACT,WAATD,EACA/B,EAAagC,GACG,cAATD,EACP7B,EAAW8B,GACK,aAATD,GACP3B,EAAY4B,IAIdC,EAAW,uCAAG,sBAAAxB,EAAA,sEACVxB,EAAU8B,WAAV,UAAwBrB,IAAMwC,MAAM,KAAM,KAAMvC,GACrDwC,MACAhB,MAAK,SAAAiB,GACFA,EAAcC,SAAQ,SAACrB,GACnBlB,EAAgBkB,EAAIsB,QACpBhC,GAAa,SANL,2CAAH,qDAcjB,OAHAiC,qBAAU,WACNN,MACD,IAEC,qBAAKO,UAAU,oBAAf,SACKnC,EACD,qCACI,oBAAImC,UAAU,gBAAd,SAA+B3C,EAAaoB,WAC5C,uBAAMuB,UAAU,eAAejC,SAAUA,EAAzC,UACI,0BAAUiC,UAAU,kBAAkBC,KAAK,OAAOC,YAAY,qDAAaX,KAAK,SAASD,SAAUA,EAAUE,MAAOjC,EAAW4C,UAAQ,IACvI,sBAAKH,UAAU,0BAAf,UACI,sBAAKA,UAAU,6BAAf,UACI,uBAAOA,UAAU,yBAAyBI,QAAQ,WAAlD,6BACA,uBAAOJ,UAAU,yBAAyBC,KAAK,OAAOV,KAAK,WAAWW,YAAY,eAAKZ,SAAUA,EAAUE,MAAO7B,OAEtH,sBAAKqC,UAAU,8BAAf,UACA,uBAAOA,UAAU,0BAA0BI,QAAQ,YAAnD,kDACI,uBAAOJ,UAAU,0BAA0BC,KAAK,OAAOV,KAAK,YAAYW,YAAY,wCAAUZ,SAAUA,EAAUE,MAAO/B,OAE7H,uBAAOuC,UAAU,iBAAiBC,KAAK,SAAST,MAAM,uCAIhE,gBCxBCa,EAzDF,WACT,MAA0BjD,mBAAS,IAAnC,mBAAOkD,EAAP,KAAcC,EAAd,KACA,EAAgCnD,mBAAS,IAAzC,mBAAOoD,EAAP,KAAiBC,EAAjB,KACA,EAAoCrD,oBAAS,GAA7C,mBAAOsD,EAAP,KAAmBC,EAAnB,KACA,EAA0BvD,mBAAS,IAAnC,mBAAOgC,EAAP,KAAcwB,EAAd,KACMC,EAAUC,cAEVxB,EAAW,SAACyB,GACd,MAAgCA,EAAzBhC,OAASQ,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,MACT,UAATD,EACAgB,EAASf,GACO,aAATD,GACPkB,EAAYjB,IAGdzB,EAAQ,uCAAG,WAAOgD,GAAP,SAAA9C,EAAA,yDACb8C,EAAM7C,iBADO,UAGLwC,EAHK,gCAICnE,EAAYyE,+BACdV,EACAE,GANC,6CASCjE,EAAY0E,2BACdX,EACAE,GAXC,yDAea,8FAAlB,KAAMU,QACNN,EAAS,+EAETA,EAAS,KAAMM,SAlBV,QAqBbL,EAAQM,KAAK,KArBA,0DAAH,sDAyBd,OACI,mCACI,qBAAKnB,UAAU,uBAAf,SACI,uBAAMA,UAAU,YAAYjC,SAAUA,EAAtC,UACI,uBAAOiC,UAAU,oBAAoBT,KAAK,QAAQU,KAAK,QAAQC,YAAY,QAAQC,UAAQ,EAACX,MAAOc,EAAOhB,SAAUA,IACpH,uBAAOU,UAAU,oBAAoBT,KAAK,WAAWU,KAAK,WAAWC,YAAY,WAAWC,UAAQ,EAACX,MAAOgB,EAAUlB,SAAUA,IAChI,uBAAOU,UAAU,MAAMC,KAAK,SAAST,MAAOkB,EAAa,iBAAmB,WAC5E,sBAAMV,UAAU,QAAhB,SAAyBZ,IACzB,sBAAMY,UAAU,aAAaoB,QATvB,kBAAMT,GAAc,SAACU,GAAD,OAAWA,MASrC,SACKX,EAAY,SAAW,2BCsCjCY,EAvFA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACb,EAA2BtE,cAAnBC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,WACZ,EAAgCC,mBAAS,IAAzC,mBAAOqB,EAAP,KAAiB+C,EAAjB,KACA,EAA4BpE,mBAAS,IAArC,mBAAeqE,GAAf,WACA,EAA8CrE,mBAAS,IAAvD,mBAAOsE,EAAP,KAAwBC,EAAxB,KACA,EAAwBvE,mBAAS,IAAjC,mBAAOwE,EAAP,KAAaC,EAAb,KACA,EAAkCzE,mBAAS,IAA3C,mBAAO0E,EAAP,KAAkBC,EAAlB,KACA,EAAkC3E,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KA8BMkE,EAAS,uCAAG,sBAAA/D,EAAA,sEACRxB,EAAU8B,WAAV,UAAwBrB,IAAMwC,MAAM,KAAM,KAAMvC,GACrDwC,MACAhB,MAAK,SAAAiB,GACFA,EAAcC,SAAQ,SAACrB,GACnBgD,EAAYhD,EAAIsB,QAChB2B,EAAUjD,EAAIsB,OAAO1B,aACrBN,GAAa,SAPP,2CAAH,qDAkBf,OANAiC,qBAAU,WACD7C,IAAOqE,GACP,IAELS,MACD,IAEC,qBAAKC,MAAO,CAACP,gBAAiBA,GAAkB1B,UAAU,oBAA1D,SACCnC,EACD,qCACI,oBAAIoE,MAAO,CAACH,UAAWA,EAAWI,WAAYN,GAAO5B,UAAU,gBAA/D,SAAgFvB,EAASA,WACzF,uBAAMV,SAnDG,SAAAC,GACbA,EAAEE,iBACFzB,EAAU8B,WAAV,UAAwBrB,IAAMsB,IAA9B,UAAqCC,EAASA,WAC7CC,OAAO,CACJuD,MAAO,CACHL,OACAE,YACAJ,qBAGR9C,MAAM,+EAyCwBoB,UAAU,eAApC,UACI,0BAAUA,UAAU,kBAAkBC,KAAK,OAAOC,YAAY,qDAAaX,KAAK,WAChF,sBAAKS,UAAU,0BAAf,UACI,sBAAKA,UAAU,6BAAf,UACI,uBAAOA,UAAU,yBAAyBI,QAAQ,WAAlD,0CACA,yBAAQd,SAtCP,SAAAtB,GACjB,IAAgBwB,EAAUxB,EAAnBe,OAASS,MAChBqC,EAAQrC,IAoCwCA,MAAOoC,EAAvC,UACI,wBAAQpC,MAAM,aAAd,wBACA,wBAAQA,MAAM,QAAd,sBAEJ,yBAAQF,SArCF,SAAAtB,GACtB,IAAgBwB,EAAUxB,EAAnBe,OAASS,MAChBuC,EAAavC,IAmCwCA,MAAOsC,EAA5C,UACI,wBAAQtC,MAAM,SAAd,oBACA,wBAAQA,MAAM,SAAd,0BAGR,sBAAKQ,UAAU,8BAAf,UACA,uBAAOA,UAAU,0BAA0BI,QAAQ,YAAnD,0CACI,uBAAOd,SAtDH,SAAAtB,GACpB,IAAgBwB,EAAUxB,EAAnBe,OAASS,MAChBmC,EAAmBnC,IAoD+BS,KAAK,QAAQT,MAAOkC,OAE1D,uBAAO1B,UAAU,iBAAiBC,KAAK,SAAST,MAAM,uCAIhE,gBC3EK2C,EATF,WACT,OACI,qCACA,uCACA,cAAC,IAAD,CAAMC,GAAG,QAAT,oC,gBC8JOC,EA/JC,SAAC,GAAgB,IAkDJC,EAlDXf,EAAc,EAAdA,SACRV,EAAUC,cAChB,EAAgC1D,mBAAS,IAAzC,mBAAOqB,EAAP,KAAiB+C,EAAjB,KACA,EAAkCpE,mBAAS,IAA3C,mBAAOmF,EAAP,KAAkBC,EAAlB,KACA,EAAkCpF,mBAAS,IAA3C,mBAAOqF,EAAP,KAAkBC,EAAlB,KACA,EAAkCtF,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KACQZ,EAAOD,cAAPC,GAEFa,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACbD,EAAEE,iBACIyE,EAAc,CAChBlE,WACAvB,GAAI0F,cACJxE,YAAa,GACbyE,gBAAiBC,KAAKC,MACtBC,aAAc,GAPL,SASPvG,EAAU8B,WAAV,UAAwBgD,IAAY/C,IAApC,UAA2CC,IAAYwE,IAAIN,GATpD,OAUbD,EAAaC,GACbnB,EAAY,IAXC,2CAAH,sDA8BR0B,EAAiB,SAAAhG,GACnB,OAAO,WACCiG,OAAOC,QAAQ,oGACfX,EAAUrE,YAAYiF,OAAOnG,EAAI,GACjCT,EAAU8B,WAAV,UAAwBgD,IAAY/C,IAApC,UAA2CiE,EAAUhE,WACpDC,OAAO,CACJN,YAAcqE,EAAUrE,iBAiBlCkF,EAAY,uCAAG,sBAAArF,EAAA,sDACjBxB,EAAU8B,WAAV,UAAwBgD,IACvBgC,YAAW,SAAAC,GACR,IAAMC,EAAgBD,EAASE,KAAKC,KAAI,SAACnF,GAAD,oBACpCtB,GAAGsB,EAAItB,IACJsB,EAAIsB,WAEX0C,EAAaiB,MAPA,2CAAH,qDAWZG,EAAY,uCAAG,4BAAA3F,EAAA,sEACMxB,EAAU8B,WAAV,UAAwBgD,IAAY5B,MAD1C,QACXlB,EADW,QAEJiF,KAAK,IACdhB,EAAajE,EAASiF,KAAK,GAAG5D,QAElChC,GAAa,GALI,2CAAH,qDAiBlB,OATAiC,qBAAU,WACF7C,IAAOqE,EACPV,EAAQM,KAAK,UAEbyC,IACAN,OAEL,CAAC/B,IAGA,qBAAKvB,UAAU,qBAAf,SACKnC,EACD,qCACI,oBAAImC,UAAU,iBAAd,mBACA,iEACA,uBAAMjC,SAAUA,EAAUiC,UAAU,iBAApC,UACI,uBAAOA,UAAU,iBAAiBC,KAAK,OAAOC,YAAY,eAAKZ,SA1EtD,SAAAtB,GACrB,IAAgBwB,EAAUxB,EAAnBe,OAASS,MAChBgC,EAAYhC,IAwE2FA,MAAOf,IAClG,uBAAOuB,UAAU,mBAAmBC,KAAK,SAAST,MAAM,uCAE5D,sBAAKQ,UAAU,4BAAf,UACMuC,EAAiC,IAArBA,EAAUsB,QACxB,qCACI,uFACA,wBAAQvE,SA5EL,SAAAtB,GACnB,IAAgBwB,EAAUxB,EAAnBe,OAASS,MAChB+C,EAAUoB,KAAI,SAAClF,GAAD,OAAcA,EAASA,WAAae,GAASkD,EAAajE,OA0EtBe,MAAOiD,EAAUhE,SAAnD,SACK8D,EAAUoB,KAAI,SAAClF,EAAUqF,GACtB,OAAQ,iCAAqBrF,EAASA,UAAjBqF,QAEpB,uBACT,cAAC,IAAD,CAAM9D,UAAU,sBAAsBoC,GAAE,WAAMb,EAAN,YAAkBkB,EAAUvF,GAA5B,WAAxC,4FAA0G,uBAC1G,eAAC,IAAD,CAAM8C,UAAU,oBAAoBoC,GAAE,WAAMb,EAAN,YAAkBkB,EAAUvF,IAAlE,UAAyEuF,EAAUhE,SAAnF,4DAEF,KAEF,gCAAK,uBACJgE,EAAUrE,YAA+C,IAAjCqE,EAAUrE,YAAYyF,QAC/C,qCACI,wBAAO7D,UAAU,0BAAjB,UACI,gCACI,+BACI,oDACA,8CACA,uEACA,mDAGR,uBAAQA,UAAU,qBAAlB,SAECyC,EAAUrE,YAAYuF,KAAI,SAACI,EAAQD,GAChC,OACI,mCACI,+BACI,6BAAKC,EAAOpG,WACZ,6BAAKoG,EAAOzF,gBACZ,6BAAKyF,EAAOtG,UACZ,6BAAI,wBAAQ2D,QAAS8B,EAAeY,GAAhC,8BAMhB,0BAEV,KAEF,sBAAK9D,UAAU,4BAAf,UACMuC,EAAiC,IAArBA,EAAUsB,QACxB,wBAAQzC,SAhGHkB,EAgG6BG,EA/F3C,WACCU,OAAOC,QAAQ,gMACf3G,EAAU8B,WAAV,UAAwBgD,IAAY/C,IAApC,UAA2C8D,EAAe7D,WAAYuF,SAClEzB,GACAG,EAAaH,EAAU,OA2FnB,mDACE,KAEF,wBAAQnB,QArHX,SAACpD,GACdA,EAAEE,iBACF3B,EAAY0H,UACZpD,EAAQM,KAAK,MAkHG,kDAKV,gBC/GC+C,EAxCG,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,WAAY5C,EAAc,EAAdA,SAI5B,OAHAxB,qBAAU,WACNd,QAAQC,IAAIiF,MAGZ,mCACA,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACKF,EAAa,cAAC,IAAD,CAAU/B,GAAI,CACJkC,SAAS,IAAD,OAAM/C,GACdgD,MAAO,CAAChD,eAE9B,cAAC,EAAD,MAEN,cAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,QAAlB,SACKF,EAAa,cAAC,IAAD,CAAU/B,GAAI,CACJkC,SAAS,IAAD,OAAM/C,GACdgD,MAAO,CAAChD,eAE9B,cAAC,EAAD,MAEN,cAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,UAAlB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,OAAlB,SACI,cAAC,EAAD,CAAS9C,SAAUA,MAEvB,cAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,mBAAlB,SACI,cAAC,EAAD,CAAQ9C,SAAUA,MAEtB,cAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,0BAAlB,SACI,cAAC,EAAD,CAAQ9C,SAAUA,cCZvBiD,EAxBH,WACV,MAAwBpH,oBAAS,GAAjC,mBAAOqH,EAAP,KAAaC,EAAb,KACA,EAAgCtH,mBAAS,IAAzC,mBAAOmE,EAAP,KAAiBoD,EAAjB,KACA,EAAoCvH,oBAAS,GAA7C,mBAAO+G,EAAP,KAAmBS,EAAnB,KAcA,OAZA7E,qBAAU,WACRxD,EAAYsI,oBAAmB,SAACC,GAC1BA,GACFH,EAAYG,EAAKC,KACjBH,GAAc,KAEdD,EAAY,IACZC,GAAc,IAEhBF,GAAQ,QAET,IAED,mCACGD,EAAO,cAAC,EAAD,CAAWN,WAAYA,EAAY5C,SAAUA,IAAe,gB,MClB1EyD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.672a58bb.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDdKuvipqVEbHicVyXLDjx_frIUA0EHMsw\",\r\n  authDomain: \"myowndrawer-98874.firebaseapp.com\",\r\n  projectId: \"myowndrawer-98874\",\r\n  storageBucket: \"myowndrawer-98874.appspot.com\",\r\n  messagingSenderId: \"278557159432\",\r\n  appId: \"1:278557159432:web:ef028ac7dec9f98b35e1bd\",\r\n  measurementId: \"G-4ZY2ZWVK8V\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","const Apikeys = {\r\n    USER_ID: 'user_9Yzjv9HczozAI5LPmsW88',\r\n    SERVICE_ID: 'service_wd4vewg',\r\n    TEMPLATE_ID: 'template_8cqpfld'\r\n}\r\n\r\nexport default Apikeys","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { dbService } from \"../fBase\";\r\nimport emailjs from \"emailjs-com\"\r\nimport Apikeys from \"../ApiKeys\";\r\n\r\nconst Answer = () => {\r\n    const { id, questionid } = useParams();\r\n    const [questionInfo, setQuestionInfo] = useState({});\r\n    const [newAnswer, setNewAnswer] = useState(\"\");\r\n    const [instaID, setInstaID] = useState(\"익명\");\r\n    const [nickname, setNickname] = useState(\"익명\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const onSubmit = async e => {\r\n        e.preventDefault();\r\n        const prevArray = questionInfo.answerArray;\r\n        const newAnswerObj = {\r\n            answerContent: newAnswer,\r\n            instaID,\r\n            nickname\r\n        }\r\n        await dbService.collection(`${id}`).doc(`${questionInfo.question}`).update({\r\n            answerArray: [...prevArray, newAnswerObj]\r\n        }).then(() => {\r\n            alert(\"성공적으로 답장했습니다. 감사합니다.\")\r\n            setNewAnswer(\"\");\r\n            setInstaID(\"익명\");\r\n            setNickname(\"익명\");\r\n            emailjs.sendForm(Apikeys.SERVICE_ID, Apikeys.TEMPLATE_ID, e.target, Apikeys.USER_ID)\r\n            .then(result => {\r\n                console.log(\"Success\", result)\r\n            }).catch(error => {\r\n                console.log(\"Error\", error.text)\r\n            })\r\n        }).catch((error) => {\r\n            alert(\"무언가 문제가 생겼습니다. 스크린샷을 통해 알려주시면 감사하겠습니다. 감사합니다.\", error)\r\n        });\r\n    }\r\n\r\n    const onChange = e => {\r\n        const {target: {name, value}} = e;\r\n        if (name === \"answer\") {\r\n            setNewAnswer(value)\r\n        } else if (name === \"instagram\") {\r\n            setInstaID(value)\r\n        } else if (name === \"nickname\") {\r\n            setNickname(value)\r\n        }\r\n    }\r\n\r\n    const getQuestion = async () => {\r\n        await dbService.collection(`${id}`).where(\"id\", \"==\", questionid)\r\n        .get()\r\n        .then(querySnapshot => {\r\n            querySnapshot.forEach((doc) => {\r\n                setQuestionInfo(doc.data())\r\n                setIsLoading(true);\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getQuestion();\r\n    }, [])\r\n    return (\r\n        <div className=\"answer__container\">\r\n            {isLoading ? \r\n            <>\r\n                <h3 className=\"answer__title\">{questionInfo.question}</h3>\r\n                <form className=\"answer__form\" onSubmit={onSubmit}>\r\n                    <textarea className=\"answer__content\" type=\"text\" placeholder=\"대답을 적어주세요.\" name=\"answer\" onChange={onChange} value={newAnswer} required />\r\n                    <div className=\"answer__input-container\">\r\n                        <div className=\"answer__nickname-container\">\r\n                            <label className=\"answer__nickname-label\" htmlFor=\"nickname\">이름 : </label>\r\n                            <input className=\"answer__nickname-input\" type=\"text\" name=\"nickname\" placeholder=\"이름\" onChange={onChange} value={nickname} />\r\n                        </div>\r\n                        <div className=\"answer__instagram-container\">\r\n                        <label className=\"answer__instagram-label\" htmlFor=\"instagram\">인스타그램 ID : </label>\r\n                            <input className=\"answer__instagram-input\" type=\"text\" name=\"instagram\" placeholder=\"인스타 아이디\" onChange={onChange} value={instaID} />\r\n                        </div>\r\n                        <input className=\"answer__submit\" type=\"submit\" value=\"답장 하기\"/>\r\n                    </div>\r\n                </form>\r\n            </>\r\n            : \"Loading...\" }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Answer;","import { authService } from \"../fBase\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\")\r\n    const history = useHistory();\r\n\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if (name === \"email\") {\r\n            setEmail(value)\r\n        } else if (name === \"password\"){\r\n            setPassword(value)\r\n        }\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            if (newAccount) {\r\n                await authService.createUserWithEmailAndPassword(\r\n                    email, \r\n                    password\r\n                );\r\n            } else {\r\n                await authService.signInWithEmailAndPassword(\r\n                    email, \r\n                    password\r\n                );\r\n            }\r\n        } catch (error) {\r\n            if (error.message === \"There is no user record corresponding to this identifier. The user may have been deleted.\") {\r\n                setError(\"입력하신 아이디가 없습니다.\")\r\n            } else {\r\n                setError(error.message)\r\n            }\r\n        }\r\n        history.push(\"/\")\r\n    }\r\n\r\n    const toggleAccount = () => setNewAccount((prev) => !prev)\r\n    return (\r\n        <>\r\n            <div className=\"auth-form__container\">\r\n                <form className=\"auth-form\" onSubmit={onSubmit}>\r\n                    <input className=\"input auth__input\" name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange={onChange}/>\r\n                    <input className=\"input auth__input\" name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange}/>\r\n                    <input className=\"btn\" type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\r\n                    <span className=\"error\">{error}</span>\r\n                    <span className=\"change-btn\" onClick={toggleAccount}>\r\n                        {newAccount? \"Log In\" : \"Create Account\"}\r\n                    </span>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Auth;","import React, { useEffect, useState } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport { dbService } from \"../fBase\";\r\n\r\nconst Detail = ({userAuth}) => {\r\n    const { id, questionid } = useParams();\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [answer, setAnswer] = useState(\"\");\r\n    const [backgroundColor, setBackgroundColor] = useState(\"\");\r\n    const [font, setFont] = useState(\"\");\r\n    const [fontStyle, setFontStyle] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        dbService.collection(`${id}`).doc(`${question.question}`)\r\n        .update({\r\n            style: {\r\n                font,\r\n                fontStyle,\r\n                backgroundColor,\r\n            }\r\n        });\r\n        alert(\"성공적으로 변경되었습니다.\");\r\n    }\r\n\r\n    const onBgColorChange = e => {\r\n        const {target: {value}} = e;\r\n        setBackgroundColor(value);\r\n    }\r\n\r\n    const onFontChange = e => {\r\n        const {target: {value}} = e;\r\n        setFont(value);\r\n    }\r\n\r\n    const onFontStyleChange = e => {\r\n        const {target: {value}} = e;\r\n        setFontStyle(value);\r\n    }\r\n\r\n    const getDetail = async () => {\r\n        await dbService.collection(`${id}`).where(\"id\", \"==\", questionid)\r\n        .get()\r\n        .then(querySnapshot => {\r\n            querySnapshot.forEach((doc) => {\r\n                setQuestion(doc.data())\r\n                setAnswer(doc.data().answerArray)\r\n                setIsLoading(true);\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if ( id !== userAuth ) {\r\n            <Redirect to=\"/\" />\r\n        }\r\n        getDetail();\r\n    }, [])\r\n    return (\r\n        <div style={{backgroundColor: backgroundColor}} className=\"answer__container\">\r\n        {isLoading ? \r\n        <>\r\n            <h3 style={{fontStyle: fontStyle, fontFamily: font}} className=\"answer__title\">{question.question}</h3>\r\n            <form onSubmit={onSubmit} className=\"answer__form\">\r\n                <textarea className=\"answer__content\" type=\"text\" placeholder=\"대답을 적어주세요.\" name=\"answer\" />\r\n                <div className=\"answer__input-container\">\r\n                    <div className=\"answer__nickname-container\">\r\n                        <label className=\"answer__nickname-label\" htmlFor=\"nickname\">질문 폰트 : </label>\r\n                        <select onChange={onFontChange} value={font}>\r\n                            <option value=\"sans-serif\">sans-serif</option>\r\n                            <option value=\"serif\">serif</option>\r\n                        </select>\r\n                        <select onChange={onFontStyleChange} value={fontStyle}>\r\n                            <option value=\"normal\">normal</option>\r\n                            <option value=\"italic\">italic</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"answer__instagram-container\">\r\n                    <label className=\"answer__instagram-label\" htmlFor=\"instagram\">배경 색상 : </label>\r\n                        <input onChange={onBgColorChange} type=\"color\" value={backgroundColor}/>\r\n                    </div>\r\n                    <input className=\"answer__submit\" type=\"submit\" value=\"답장 하기\"/>\r\n                </div>\r\n            </form>\r\n        </>\r\n        : \"Loading...\" }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Detail;","import { Link } from \"react-router-dom\"\r\n\r\nconst Home = () => {\r\n    return (\r\n        <>\r\n        <div>Home</div>\r\n        <Link to=\"/auth\">로그인</Link>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { v4 as uuidv4} from \"uuid\";\r\nimport { authService, dbService } from \"../fBase\";\r\n\r\nconst Profile = ({userAuth}) => {\r\n    const history = useHistory();\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [questions, setQuestions] = useState([]);\r\n    const [selection, setSelection] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const { id } = useParams();\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const questionObj = {\r\n            question,\r\n            id: uuidv4(),\r\n            answerArray: [],\r\n            registered_dttm: Date.now(),\r\n            updated_dttm: 0,\r\n        }\r\n        await dbService.collection(`${userAuth}`).doc(`${question}`).set(questionObj)\r\n        setSelection(questionObj)\r\n        setQuestion(\"\");\r\n    }\r\n\r\n    const onQuestionChange = e => {\r\n        const {target: {value}} = e;\r\n        setQuestion(value);\r\n    }\r\n\r\n    const onSelectChange = e => {\r\n        const {target: {value}} = e;\r\n        questions.map((question) => question.question === value && setSelection(question))\r\n    }\r\n\r\n    const onLogOut = (e) => {\r\n        e.preventDefault();\r\n        authService.signOut();\r\n        history.push(\"/\")\r\n    }\r\n\r\n    const onDeleteAnswer = id => {\r\n        return function () {\r\n            if (window.confirm(\"정말 해당 답변을 삭제하시겠습니까?\")) {\r\n                selection.answerArray.splice(id, 1)\r\n                dbService.collection(`${userAuth}`).doc(`${selection.question}`)\r\n                .update({\r\n                    answerArray : selection.answerArray\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const onDeleteQuestion = selectionToDel => {\r\n        return function () {\r\n            if (window.confirm(\"정말 해당 질문을 삭제하시겠습니까? \\n 포함된 답변들도 모두 삭제됩니다.\")) {\r\n                dbService.collection(`${userAuth}`).doc(`${selectionToDel.question}`).delete();\r\n                if (questions) {\r\n                    setSelection(questions[0])\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const getQuestions = async () => {\r\n        dbService.collection(`${userAuth}`)\r\n        .onSnapshot(snapshot => {\r\n            const questionsData = snapshot.docs.map((doc) => ({\r\n                id:doc.id,\r\n                ...doc.data(),\r\n            }))\r\n            setQuestions(questionsData)\r\n        })\r\n    }\r\n\r\n    const getSelection = async () => {\r\n        const question = await dbService.collection(`${userAuth}`).get()\r\n        if (question.docs[0]) {\r\n            setSelection(question.docs[0].data())\r\n        }\r\n        setIsLoading(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (id !== userAuth) {\r\n            history.push('/auth')\r\n        } else {\r\n            getSelection();\r\n            getQuestions();\r\n        }\r\n    }, [userAuth])\r\n\r\n    return (\r\n        <div className=\"profile__container\">\r\n            {isLoading ? \r\n            <>\r\n                <h3 className=\"profile__title\">Q & A</h3>\r\n                <h5>질문 만들기</h5>\r\n                <form onSubmit={onSubmit} className=\"question__form\">\r\n                    <input className=\"question__text\" type=\"text\" placeholder=\"질문\" onChange={onQuestionChange} value={question}/>\r\n                    <input className=\"question__submit\" type=\"submit\" value=\"질문 만들기\"/>\r\n                </form>\r\n                <div className=\"profile__answer-container\">\r\n                    { questions ? questions.length !== 0 &&\r\n                    <>\r\n                        <h5>질문 관리 & 답변 보기</h5>\r\n                        <select onChange={onSelectChange} value={selection.question}>\r\n                            {questions.map((question, index) => {\r\n                                return (<option key={index}>{question.question}</option>)\r\n                            })}\r\n                        </select><br /> \r\n                        <Link className=\"question-page__link\" to={`/${userAuth}/${selection.id}/custom`}>답변 페이지 커스텀 + 답변 보기</Link><br />\r\n                        <Link className=\"answer-page__link\" to={`/${userAuth}/${selection.id}`}>{selection.question} 답변 링크 공유하기</Link>\r\n                    </>\r\n                    : null\r\n                    }\r\n                    <div><br />\r\n                    {selection.answerArray ? selection.answerArray.length !== 0 &&\r\n                    <>\r\n                        <table className=\"answer__table-container\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>글쓴이</th>\r\n                                    <th>내용</th>\r\n                                    <th>인스타 아이디</th>\r\n                                    <th>삭제</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody  className=\"answer__table-body\">                                \r\n\r\n                            {selection.answerArray.map((answer, index) => {\r\n                                return (\r\n                                    <>\r\n                                        <tr>\r\n                                            <td>{answer.nickname}</td>\r\n                                            <td>{answer.answerContent}</td>\r\n                                            <td>{answer.instaID}</td>\r\n                                            <td><button onClick={onDeleteAnswer(index)}>X</button></td>\r\n                                        </tr>\r\n                                    </>\r\n                                )\r\n                            })}\r\n                            </tbody>\r\n                        </table><br />\r\n                    </>\r\n                    : null\r\n                    }\r\n                    <div className=\"profile__button-container\">\r\n                        { questions ? questions.length !== 0 &&\r\n                        <button onClick={onDeleteQuestion(selection)}>질문 삭제하기</button>\r\n                        : null\r\n                        }\r\n                        <button onClick={onLogOut}>로그아웃</button>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n            : \"Loading...\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React, { useEffect } from \"react\";\r\nimport { HashRouter as Router, Route, Switch, Redirect} from \"react-router-dom\";\r\nimport Answer from \"../routes/Answer\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Detail from \"../routes/Detail\";\r\nimport Home from \"../routes/Home\";\r\nimport Profile from \"../routes/Profile\";\r\n\r\nconst AppRouter = ({isLoggedIn, userAuth}) => {\r\n    useEffect(()=>{\r\n        console.log(isLoggedIn)\r\n    })\r\n    return (\r\n        <>\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    {isLoggedIn ? <Redirect to={{\r\n                                            pathname: `/${userAuth}`,\r\n                                            stete: {userAuth}\r\n                                            }} /> \r\n                    : <Home />}\r\n                </Route>\r\n                <Route exact path=\"/auth\">\r\n                    {isLoggedIn ? <Redirect to={{\r\n                                            pathname: `/${userAuth}`,\r\n                                            stete: {userAuth}\r\n                                            }} /> \r\n                    : <Auth />}\r\n                </Route>\r\n                <Route exact path=\"/logout\">\r\n                    <Home />\r\n                </Route>\r\n                <Route exact path=\"/:id\">\r\n                    <Profile userAuth={userAuth}/>\r\n                </Route>\r\n                <Route exact path=\"/:id/:questionid\">\r\n                    <Answer userAuth={userAuth}/>\r\n                </Route>\r\n                <Route exact path=\"/:id/:questionid/custom\">\r\n                    <Detail userAuth={userAuth}/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AppRouter;","import React, { useEffect, useState } from \"react\";\nimport { authService } from \"../fBase\";\nimport AppRouter from \"./Routes\";\n\nconst App = () => {\n  const [init, setInit] = useState(false);\n  const [userAuth, setUserAuth] = useState(\"\");\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserAuth(user.uid)\n        setIsLoggedIn(true)\n      } else {\n        setUserAuth(\"\")\n        setIsLoggedIn(false)\n      }\n      setInit(true);\n    })\n  }, []);\n  return (\n    <>\n      {init ? <AppRouter isLoggedIn={isLoggedIn} userAuth={userAuth} /> : \"Loading...\"}\n    </>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App\"\nimport \"./Styles.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}